'use strict';

// Load modules

const Code = require('code');
const Lab = require('lab');
const Path = require('path');

const ESH = require('../index.js');


// Declare internals

const internals = {
    privateKey: 'MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAJWnEdvTo+VrPDkNv4C9ptqIrS+qIjawaRLkCiYX+LtI1Sw+XH7J8/o9KuAGwezoH+0XnQIJwOvE07TGvkWncnehBJwnToHsQXbzUlMrJQHG3+qgGkbbMQZRzrIqcEyEPGy/noKufJh3Z9srK5R8/0nVvjv0UT9XTM0EdcVp2a6rAgMBAAECgYBhbxYMhr3Fx8y85LuTKWcyDxya1O1TqAWxO/FzndXesevA05VLI1eKzDpXA29NPFBVADPEOO93UX34zBDjrsKyJj8nQHY/b6Sjkg852QH2wqKy9XJaf8Bss1K9uu8QEnfbFqUE3RhwrsKbk73EEzZqDHIydKEtAvGrFf5TBrZ4MQJBAPCNTAA8mMMMUDX4pZUEaMm1ePDkDCBzJ2iMkTnimuzVZ2pr430RvX2yvbv7IGMUozyajAfPB5Vp7u/Wrb9ahHkCQQCfQ2B/fwJqC64o+UB8q/7RWPGoE4uusd5ifCtPHZV0rT/pHO4TdxiVuKD2ijEUO2MEy8lemDoMbAs31koQIltDAkBDQQ31pvuC1Od8H3eT8Tam5oDYwLmPPQLQnTRhPbTY8FVIkL96kUIsaZPYgb6tVPDKmd76s+xH3uU50wiizljpAkBmSBYsK3x4cIHsLI9ewfMHrdCc+diGXBMPOuFxkPVQFofqBTtc4uq2FPnC++MjNDSWeu4bQzZcjfLybDvqerYTAkEAu4DXbuKqD6o5pl5nZRZmVhVkmLVDUTJ3oGaxe7n4YHFbQVpuTOtarP9ZSpCC82KNp876W7pQ2PoYvei+L3MGxA==',
    pemFilePath: Path.join(__dirname, 'sample.pem')
};

// Test shortcuts

const lab = exports.lab = Lab.script();
const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

describe('ESH', () => {

    describe('Constructor', () => {

        it('accepts privateKey', (done) => {

            const esh = new ESH({ privateKey: internals.privateKey });
            expect(esh).to.exist();
            done();
        });

        it('accepts pemFile', (done) => {

            const esh = new ESH({ pemFile: internals.pemFilePath });
            expect(esh).to.exist();
            done();
        });

        it('thorws is privateKey or perm file is not passed', (done) => {

            const test = (() => {

                new ESH();
            });

            expect(test).to.throw();
            done();
        });
    });

    describe('Sign Assert', () => {

        it('throws error for no params', (done) => {

            const esh = new ESH({ pemFile: internals.pemFilePath });
            const test = (() => {

                esh.sign();
            });

            expect(test).to.throw();
            done();
        });


        it('checks for all mandatory headers', (done) => {

            const esh = new ESH({ pemFile: internals.pemFilePath });
            const test = (() => {

                const headers = {
                    'wm_consumer.id': '1',
                    'wm_svc.name': 'dev'
                };
                esh.sign(headers);
            });

            expect(test).to.throw();
            done();
        });

        it('returns signed headers along with others headers passed', (done) => {

            const esh = new ESH({ pemFile: internals.pemFilePath });
            const headers = {
                'WM_CONSUMER.ID': '1',
                'wm_sec.key_version': 1,
                'wm_consumer.intimestamp': new Date().getTime()
            };
            const signedHeaders = esh.sign(headers);
            expect(signedHeaders.SignedHeaders).to.equal('WM_CONSUMER.ID;WM_CONSUMER.INTIMESTAMP;WM_SEC.KEY_VERSION;');
            expect(signedHeaders['WM_CONSUMER.INTIMESTAMP']).to.exist();
            expect(signedHeaders['WM_SEC.AUTH_SIGNATURE']).to.exist();
            expect(signedHeaders['WM_CONSUMER.ID']).to.equal(headers['WM_CONSUMER.ID']);
            expect(signedHeaders['wm_sec.key_version']).to.equal(headers['wm_sec.key_version']);
            done();
        });

        it('returns signed headers along with others headers passed and using privateKey ', (done) => {

            const esh = new ESH({ privateKey: internals.privateKey });
            const headers = {
                'wm_consumer.id': '1',
                'wm_sec.key_version': 1,
                'wm_consumer.InTimestamp': new Date().getTime()
            };
            const signedHeaders = esh.sign(headers);
            expect(signedHeaders.SignedHeaders).to.equal('WM_CONSUMER.ID;WM_CONSUMER.INTIMESTAMP;WM_SEC.KEY_VERSION;');
            expect(signedHeaders['WM_CONSUMER.INTIMESTAMP']).to.exist();
            expect(signedHeaders['WM_SEC.AUTH_SIGNATURE']).to.exist();
            expect(signedHeaders['wm_consumer.id']).to.equal(headers['wm_consumer.id']);
            expect(signedHeaders['wm_sec.key_version']).to.equal(headers['wm_sec.key_version']);
            done();
        });

        it('returns signed headers using \'wm_consumer.intimestamp\' passed.', (done) => {

            const esh = new ESH({ pemFile: internals.pemFilePath });
            const headers = {
                'wm_svc.name': 'services-name',
                'wm_svc.version': '1.0.0',
                'wm_svc.env': 'dev',
                'wm_consumer.id': '11111111-1111-1111-1111-111111111111',
                'WM_CONSUMER.INTIMESTAMP': new Date().getTime(),
                'wm_sec.key_version': 1
            };
            const signedHeaders = esh.sign(headers);
            expect(signedHeaders.SignedHeaders).to.equal('WM_CONSUMER.ID;WM_CONSUMER.INTIMESTAMP;WM_SEC.KEY_VERSION;');
            expect(signedHeaders['WM_CONSUMER.INTIMESTAMP']).to.equal(headers['WM_CONSUMER.INTIMESTAMP']);
            expect(signedHeaders['WM_SEC.AUTH_SIGNATURE']).to.exist();
            expect(signedHeaders['wm_consumer.id']).to.equal(headers['wm_consumer.id']);
            expect(signedHeaders['wm_sec.key_version']).to.equal(headers['wm_sec.key_version']);
            expect(Object.keys(signedHeaders).length).to.equal(Object.keys(headers).length + 2);
            done();
        });
    });
});
